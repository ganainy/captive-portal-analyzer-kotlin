package com.example.captive_portal_analyzer_kotlin.screens.automatic_analysis


import NetworkSessionRepository
import android.app.Application
import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.captive_portal_analyzer_kotlin.BuildConfig
import com.example.captive_portal_analyzer_kotlin.R
import com.example.captive_portal_analyzer_kotlin.dataclasses.SessionData
import com.example.captive_portal_analyzer_kotlin.dataclasses.SessionDataDTO
import com.example.captive_portal_analyzer_kotlin.dataclasses.toSessionDataDTO
import com.google.ai.client.generativeai.GenerativeModel
import com.google.ai.client.generativeai.type.content
import com.google.ai.client.generativeai.type.generationConfig
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking


/**
 * Represents the state of the UI in the automatic analysis screen.
 *
 * @property isLoading true if the analysis is in progress, false otherwise
 * @property error the error message if the analysis failed
 * @property outputText the output text generated by the AI model
 * @property inputText the input text provided by the user in the edit text
 * @property clickedSessionId the id of the session that was clicked
 */
data class AutomaticAnalysisUiState(
    val isLoading: Boolean = false,
    val error: String? = null,
    val outputText: String? = null,
    val inputText: String = "Look at the following prompt and image(s), and then give us a report about the data the " +
            "captive portal collects about the user and any information regarding the data privacy " +
            "and ToS of the captive portal if found " +
            "and how you rate them:",
    val clickedSessionId: String?=null,
    val sessionData: SessionData?=null,
    val sessionDataDTO: SessionDataDTO?=null,
)


/**
 * A [ViewModel] that generates text based on a given [SessionData] using a generative AI model.
 *
 * @param generativeModel the generative AI model to use for generating text
 * @param application the application context
 * @param repository the repository of network sessions
 * @param clickedSessionId the id of the session that was clicked
 */
class AutomaticAnalysisViewModel(
    private val generativeModel: GenerativeModel,
    application: Application,
    private val repository: NetworkSessionRepository,
    clickedSessionId: String?,
) : AndroidViewModel(application) {


    private val context: Context
        get() = getApplication<Application>().applicationContext

    //state related to workoutExerciseListScreen
    private val _automaticAnalysisUiState = MutableStateFlow(AutomaticAnalysisUiState())
    val automaticAnalysisUiState = _automaticAnalysisUiState.asStateFlow()


    init {
        // Set the clicked session ID in the AutomaticAnalysisUiState
        setClickedSessionId(clickedSessionId)
        // Load session data using the clicked session ID
        loadSessionData()
        // Convert session data to DTO format to prepare it for transmission to AI server for analysis
        convertSessionDataToDTO()
    }

    private fun convertSessionDataToDTO() {
        val sessionDataDTO = _automaticAnalysisUiState.value.sessionData.toSessionDataDTO()
        _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
            sessionDataDTO = sessionDataDTO,
        )
    }


    /**
     * Analyzes the given session data using AI to generate a report about collected data, data privacy and ToS
     * of the captive portal. It updates the UI state based on the analysis result.
     *
     * @param sessionDataDTO the session data transfer object containing relevant information
     */
    fun analyzeWithAi(
    ) {
        val sessionDataDTO = _automaticAnalysisUiState.value.sessionDataDTO

        if (sessionDataDTO == null) {
            _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
                isLoading = false,
                error = (context.getString(R.string.something_went_wrong))
            )
        }

        _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(isLoading = false)
        val prompt =
            "${_automaticAnalysisUiState.value.inputText} ${sessionDataDTO?.prompt}"

        viewModelScope.launch(Dispatchers.IO) {
            try {
                val inputContent = content {
                    if (!sessionDataDTO?.privacyOrTosRelatedScreenshots.isNullOrEmpty()) {
                        for (screenshot in sessionDataDTO?.privacyOrTosRelatedScreenshots!!) {
                            val bitmap = pathToBitmap(screenshot.path)
                            image(bitmap)
                        }
                    }
                    text(prompt)
                }

                var outputContent = ""

                generativeModel.generateContentStream(inputContent)
                    .collect { response ->
                        outputContent += response.text
                        _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
                            isLoading = false,
                            outputText = outputContent,
                        )
                    }
            } catch (e: Exception) {
                _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
                    isLoading = false,
                    error = (e.localizedMessage ?: "")
                )
            }
        }
    }

    /**
     * Loads the session data for the given [clickedSessionId] from the database.
     *
     * @param clickedSessionId the id of the session to load
     */
    private fun loadSessionData() = runBlocking(Dispatchers.IO) {
        val clickedSessionId = _automaticAnalysisUiState.value.clickedSessionId

        try {
            if (clickedSessionId == null) {
                _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
                    isLoading = false,
                    error = (context.getString(R.string.session_id_not_found))
                )
                return@runBlocking
            }
            _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
                sessionData = repository.getCompleteSessionData(clickedSessionId).first()
            )
        } catch (e: Exception) {
            _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
                isLoading = false,
                error = (context.getString(R.string.something_went_wrong))
            )
        }
    }


    /**
     * Updates the edit text content with the given text. The input text is limited to 300 characters.
     *
     * @param text the new edit text content
     */
    fun updatePromptEditText(text: String) {
        val newText = text.take(300)
        _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
            inputText = newText,
        )
    }

    fun setClickedSessionId(clickedSessionId: String?) {
        _automaticAnalysisUiState.value = _automaticAnalysisUiState.value.copy(
            clickedSessionId = clickedSessionId,
        )
    }
}

/**
 * Decodes a file path into a Bitmap because the AI server expects a Bitmap.
 *
 * @param path the file path of the image
 * @return the decoded Bitmap
 */
private fun pathToBitmap(path: String): Bitmap {
    val bitmap = BitmapFactory.decodeFile(path)
    return bitmap
}


/**
 * A factory for creating [AutomaticAnalysisViewModel] instances.
 *
 * @param application the application context
 * @param repository the repository of network sessions
 */
class AutomaticAnalysisViewModelFactory(
    private val application: Application,
    private val repository: NetworkSessionRepository,
    private val clickedSessionId: String?,
) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(AutomaticAnalysisViewModel::class.java)) {
            // set up the generative model with the current API key
            val config = generationConfig {
                temperature = 0.7f
            }
            val generativeModel = GenerativeModel(
                modelName = "gemini-1.5-flash-latest", // Specifies the name of the generative model to be used for analysis
                apiKey = BuildConfig.API_KEY_RELEASE,//apiKey to authenticate requests
                generationConfig = config // Applies the configuration settings for generation
            )
            @Suppress("UNCHECKED_CAST")
            return AutomaticAnalysisViewModel(
                generativeModel,
                application,
                repository,
                clickedSessionId
            ) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}